from enum import Enum

class NodeType(Enum):
    ADD = 1
    ADDASSIGN = 2
    SUBTRACT = 3
    SUBTRACTASSIGN = 4
    MULTIPLY = 5
    MULTIPLYASSIGN = 6
    DIVIDE = 7
    DIVIDEASSIGN = 8
    MODULO = 9
    MODULOASSIGN = 10
    BITAND = 11
    BITOR = 12
    POWER = 13
    LESSTHAN = 14
    GREATERTHAN = 15
    EQUAL = 16
    NOTEQUAL = 17
    LESSTHANEQUAL = 18
    GREATERTHANEQUAL = 19
    MODULE = 20
    EMPTYLINE = 21
    SIMPLEWHITESPACE = 22
    COMMENT = 23
    NEWLINE = 24
    FUNCTIONDEF = 25
    NAME = 26
    PARAMETERS = 27
    INDENTEDBLOCK = 28
    TRAILINGWHITESPACE = 29
    SIMPLESTATEMENTLINE = 30
    EXPR = 31
    CALL = 32
    ARG = 33
    SIMPLESTRING = 34
    RETURN = 35
    ASSIGN = 36
    ASSIGNTARGET = 37
    LIST = 38
    LEFTSQUAREBRACKET = 39
    ELEMENT = 40
    INTEGER = 41
    COMMA = 42
    RIGHTSQUAREBRACKET = 43
    BINARYOPERATION = 44
    FOR = 45
    AUGASSIGN = 46
    UNARYOPERATION =  47
    MINUS = 48
    COMPARISON = 49
    COMPARISONTARGET = 50
    BOOLEANOPERATION = 51
    LEFTPAREN = 52
    AND = 53
    RIGHTPAREN = 54
    OR = 55
    IFEXP = 56
    IS = 57
    BITANDASSIGN = 58
    BITORASSIGN = 59
    BITINVERT = 60
    NOT = 61
    PLUS = 62
    MAYBESENTINEL = 63
    CLASSDEF = 64
    PARAM = 65
    PARAMSTAR = 66
    ASSIGNEQUAL = 67
    BASEEXPRESSION = 68
    ANNOTATION = 69
    BASEPARENTHESIZABLEWHITESPACE = 70
    SEMICOLON = 71
    BASECOMPOUNDSTATEMENT = 72
    IF = 73
    ELSE = 74
    TRUE = 75
    FALSE = 76



NodeType = Enum('NodeType', [('ADD', 1), ('ADDASSIGN', 2), ('SUBTRACT', 3), ('SUBTRACTASSIGN', 4), ('MULTIPLY', 5), ('MULTIPLYASSIGN', 6), 
                            ('DIVIDE', 7), ('DIVIDEASSIGN', 8), ('MODULO', 9), ('MODULOASSIGN', 10),  ('BITAND', 11), ('BITOR', 12), ('POWER', 13), 
                            ('LESSTHAN', 14), ('GREATERTHAN', 15), ('EQUAL', 16), ('NOTEQUAL', 17), ('LESSTHANEQUAL', 18), ('GREATERTHANEQUAL', 19), 
                            ('MODULE', 20), ('EMPTYLINE', 21), ('SIMPLEWHITESPACE', 22), ('COMMENT', 23), ('NEWLINE', 24), ('FUNCTIONDEF', 25),
                            ('NAME', 26), ('PARAMETERS', 27), ('INDENTEDBLOCK', 28), ('TRAILINGWHITESPACE', 29), ('SIMPLESTATEMENTLINE', 30), 
                            ('EXPR', 31), ('CALL', 32), ('ARG', 33), ('SIMPLESTRING', 34), ('RETURN', 35), ('ASSIGN', 36), ('ASSIGNTARGET', 37),
                            ('LIST', 38), ('LEFTSQUAREBRACKET', 39), ('ELEMENT', 40), ('INTEGER', 41), ('COMMA', 42), ('RIGHTSQUAREBRACKET', 43),
                            ('BINARYOPERATION', 44), ('FOR', 45), ('AUGASSIGN', 46), ('UNARYOPERATION', 47), ('MINUS', 48), ('COMPARISON', 49), 
                            ('COMPARISONTARGET', 50), ('BOOLEANOPERATION', 51), ('LEFTPAREN', 52), ('AND', 53), ('RIGHTPAREN', 54), ('OR', 55), 
                            ('IFEXP', 56), ('IS', 57), ('BITANDASSIGN', 58), ('BITORASSIGN', 59), ('BITINVERT', 60), ('NOT', 61), ('PLUS', 62), 
                            ('MAYBESENTINEL', 63), ('CLASSDEF', 64), ('PARAM', 65), ('PARAMSTAR', 66), ('ASSIGNEQUAL', 67), ('BASEEXPRESSION', 68), 
                            ('ANNOTATION', 69), ('BASEPARENTHESIZABLEWHITESPACE', 70), ('SEMICOLON', 71), ('BASECOMPOUNDSTATEMENT', 72), ('IF', 73),
                            ('ELSE', 74), ('TRUE', 75), ('FALSE', 76)])